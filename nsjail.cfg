name: "python_sandbox"
description: "Run Python with tight isolation"
mode: ONCE
hostname: "nsjail"
cwd: "/work"
time_limit: 5
max_cpus: 1

# Drop env by default; allow only needed
keep_env: false
envar: "LANG=C.UTF-8"
envar: "PYTHONIOENCODING=utf-8"
envar: "PATH=/usr/bin:/bin"

# Namespaces
clone_newuser: true
clone_newpid: true
clone_newipc: true
clone_newuts: true
clone_newns: true
clone_newnet: true

# If you donâ€™t need outbound net, disable loopback to harden
iface_no_lo: true

# User mappings (nobody)
uidmap { inside_id: 65534 outside_id: 65534 }
gidmap { inside_id: 65534 outside_id: 65534 }

# Resource limits
rlimit_as: 256000000        # ~256MB address space
rlimit_fsize: 2000000       # 2MB output file size
cgroup_mem_max: 256000000
cgroup_pids_max: 32

# Mounts: read-only system, separate writable work and tmp
# Proc disabled for simplicity
mount_proc: false

mount { src: "/lib"    dst: "/lib"    is_bind: true rw: false }
mount { src: "/lib64"  dst: "/lib64"  is_bind: true rw: false }
mount { src: "/usr/lib" dst: "/usr/lib" is_bind: true rw: false }
mount { src: "/bin"    dst: "/bin"    is_bind: true rw: false }
mount { src: "/usr/bin" dst: "/usr/bin" is_bind: true rw: false }

# Provide python path in a known location too
mount { src: "/sandbox/runtime/usr/bin" dst: "/usr/local/bin" is_bind: true rw: false }

# App working directory and ephemeral tmp
mount { src: "/sandbox/work" dst: "/work" is_bind: true rw: true }
mount { src: "/sandbox/tmp" dst: "/tmp" is_bind: true rw: true }

# Optional: tmpfs for /dev/null etc.
mount { dst: "/dev" fstype: "tmpfs" rw: true options: "size=1m,mode=755" }
